#!/bin/fish

if test "$argv[1]" = help
    echo 'Usage: cse [command]'
    echo
    echo 'Commands:'
    echo '    help      Print this help message'
    echo '    update    Update this script'
    echo '    local     Print the local directory'
    echo '    remote    Print the remote directory'
    echo '    pull      Pull changes from the CSE server to the local machine'
    echo '    push      Push changes from the local machine to the CSE server'
    echo '    test      Autotest assignments against self-made test cases'
    echo
    echo 'If no command is specified, SSH into the CSE server.'
    echo 'If an unrecognised command is specified, SSH into the CSE server and execute the command.'

    exit
end

set -l src (dirname (realpath (status filename)))

if test "$argv[1]" = update
    echo 'Updating...'

    cd $src || exit 1
    git pull
    ./install.fish

    exit
end

function err -a msg
    set_color red
    echo $msg >&2
    set_color normal
end

function invalid-zid -a zid
    test (string length $zid) != 8 -o (string sub -e 1 $zid) != z
end

function get-zid
    read -lp "echo -n 'Enter your zID: '" zid
    if invalid-zid "$zid"
        err "Invalid zID: $zid"
        get-zid
    else
        echo $zid
    end
end

function pull -a login from to
    rsync -a --delete -r -P $login:$from/ $to >&2
end

function push -a login from to
    rsync -a --delete -r -P $from/ $login:$to >&2
end

function cse-ssh -a login local_dir remote_dir
    set -l args $argv[4..]
    set -l relative_dir (realpath --relative-to $local_dir (pwd))
    string match -qr '\.\./.*' $relative_dir || set -l in_synced_dir  # If path starts with ../ it is outside the synced dir

    # SSH into CSE server
    if test -z "$args"
        # If the current directory is in the local directory, push before ssh
        if set -q in_synced_dir
            push $login $local_dir $remote_dir
            ssh -qt $login "cd $remote_dir/$relative_dir ; exec \$SHELL -l"
        else
            ssh -q $login
        end
    else
        # If args are provided, execute them in the remote server
        if set -q in_synced_dir
            push $login $local_dir $remote_dir
            ssh -qt $login "cd $remote_dir/$relative_dir && $args"
        else
            ssh -qt $login $args
        end
    end
end

set -q XDG_CONFIG_HOME && set -l config $XDG_CONFIG_HOME || set -l config $HOME/.config
set -l local_dir $HOME/Desktop/CSE
set -l remote_dir ./Desktop

# Print local dir
if test "$argv[1]" = local
    echo $local_dir
    exit
end

# Print remote dir
if test "$argv[1]" = remote
    echo $remote_dir
    exit
end

# Get zID from file or prompt
mkdir -p $config/cse
test -f $config/cse/zid.txt && set -l zid (cat $config/cse/zid.txt) || set -l zid (get-zid | tee $config/cse/zid.txt)
set -l login $zid@cse.unsw.edu.au

# If user cancelled zID prompt
if invalid-zid "$zid"
    err 'Invalid zID. Exiting.'
    rm $config/cse/zid.txt
    exit 1
end

# Ensure ssh keys are set up
test -f $HOME/.ssh/id_ed25519 || ssh-keygen -t ed25519 -f $HOME/.ssh/id_ed25519 -N ''
ssh-copy-id $login 2> /dev/null

# Pull changes from CSE server using rsync
if test "$argv[1]" = pull
    echo 'Pulling from remote...'
    pull $login $remote_dir $local_dir
    exit
end

# Push changes to CSE server using rsync
if test "$argv[1]" = push
    echo 'Pushing to remote...'
    push $login $local_dir $remote_dir
    exit
end

# Autotest assignments
if test "$argv[1]" = test
    set -l source_path $argv[2]
    if ! test -f $source_path
        err "Invalid program: $source_path"
        exit 1
    end

    set -l prog_name (basename $argv[2] .c)
    set -l tests $src/tests/$prog_name

    if ! test -d $tests
        err "No tests found for $prog_name"
        exit 1
    end

    echo 'Starting autotest...'

    set -l exec_path /tmp/cse/$prog_name/$prog_name

    # Compile program
    mkdir -p (dirname $exec_path)
    echo "dcc --valgrind --leak-check $source_path -o $exec_path"
    dcc --valgrind --leak-check $source_path -o $exec_path

    set -l passed 0
    set -l failed 0

    for test in $tests/*
        set -l test_name (basename $test)
        set -l out_dir /tmp/cse/$prog_name/$test_name
        mkdir -p $out_dir

        # Remove carriage returns cause 1511 uses CRLF for newlines for some reason (Unix uses LF so we want LF only)
        cse-ssh $login $local_dir $remote_dir "echo '$(cat $test)' | 1511 $prog_name" | tr -d '\r' > $out_dir/expected
        cat $test | $exec_path > $out_dir/out
        if cmp --silent $out_dir/expected $out_dir/out
            set passed (math $passed + 1)
            printf 'Test %s (%s) - ' $test_name $prog_name
            set_color green
            echo 'passed'
            set_color normal
        else
            set failed (math $failed + 1)
            printf 'Test %s (%s) - ' $test_name $prog_name
            set_color red
            echo 'failed'
            set_color normal
            echo 'The inputs for this test were:'
            set_color red
            cat $test
            set_color normal
            echo 'The differences between your program\'s output and the expected output were:'
            diff -u $out_dir/expected $out_dir/out
        end
    end

    test $passed -eq 0 && set_color red || set_color green
    printf '%d tests passed' $passed
    test $failed -eq 0 && set_color green || set_color red
    echo " $failed tests failed"
    set_color normal

    exit
end

# SSH into remote and exec args if not given named args
cse-ssh $login $local_dir $remote_dir $argv
